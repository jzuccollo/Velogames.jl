---
title: "One-day Race Team Selection"
subtitle: "Using Multi-Source Data Integration"
---

```{julia}
using Velogames, DataFrames, Statistics, StatsBase, Printf

# Race configuration
raceurl = "https://www.velogames.com/sixes-superclasico/2024/riders.php"
betfairurl = "https://www.betfair.com/betting/cycling/gp-de-quebec/outright-betting/mwe-924.419811627"
racehash = "#GPMontreal"
racesex = "me"
racecategory = "one-day-races"

# Create custom cache configuration for this analysis
race_cache = CacheConfig("/tmp/oneday_analysis", 12, true)  # 12-hour cache

println("🚴 One-Day Race Team Selection Analysis")
println("📍 Race: $racehash")
println("💾 Using custom cache: $(race_cache.cache_dir)")
```

# 🚀 Method 1: Automated Multi-Source Team Selection

The new `solverace()` function automatically combines VeloGames data with PCS professional rankings and optimizes team selection:

```{julia}
println("🤖 Running automated multi-source optimization...")

# Try different weighting strategies
weighting_strategies = [
    (0.3, "Conservative: 30% VG, 70% PCS"),
    (0.5, "Balanced: 50% VG, 50% PCS"), 
    (0.7, "Aggressive: 70% VG, 30% PCS")
]

results_summary = DataFrame(
    strategy = String[],
    team_cost = Int[],
    vg_weight = Float64[],
    riders_selected = Int[]
)

for (vg_weight, description) in weighting_strategies
    println("\n📊 Testing: $description")
    
    try
        team = solverace(raceurl, :oneday, racehash, vg_weight; cache_config=race_cache)
        
        if nrow(team) > 0
            total_cost = sum(team.vgcost)
            println("   ✅ Success: $(nrow(team)) riders, cost: $total_cost credits")
            
            push!(results_summary, (description, total_cost, vg_weight, nrow(team)))
            
            # Store the best team for later display
            if vg_weight == 0.5  # Use balanced approach as primary
                global best_automated_team = team
            end
        else
            println("   ⚠️ No team selected")
        end
        
    catch e
        println("   ❌ Failed: $e")
    end
end

# Display strategy comparison
if nrow(results_summary) > 0
    println("\n📋 Strategy Comparison:")
    show(results_summary, allrows=true)
end
```

## 🏆 Best Automated Team Selection

```{julia}
if @isdefined(best_automated_team) && nrow(best_automated_team) > 0
    println("🎯 Optimal Team (Balanced 50/50 Strategy):")
    println("💰 Total Cost: $(sum(best_automated_team.vgcost)) credits")
    println("👥 Team Size: $(nrow(best_automated_team)) riders")
    
    # Display team with clean formatting
    display_team = select(best_automated_team, :rider, :team, :vgcost, :vgpoints)
    rename!(display_team, :rider => :Rider, :team => :Team, :vgcost => :Cost, :vgpoints => :Points)
    display_team.Team = replace.(display_team.Team, "|" => "-")  # Clean team names
    
    show(display_team, allrows=true)
else
    println("⚠️ Automated team selection not available - proceeding with manual approach")
end
```

# 🔧 Method 2: Advanced Manual Multi-Source Analysis

For cases requiring custom analysis, use the enhanced manual approach with new capabilities:

```{julia}
println("🔍 Running advanced manual multi-source analysis...")

try
    # Step 1: Get VG data with new caching
    println("1️⃣ Fetching VeloGames data...")
    ridervg = getvgriders(raceurl; cache_config=race_cache)
    
    # Filter to race participants
    if !isempty(racehash)
        ridervg = ridervg[ridervg.startlist.==racehash, :]
        println("   📊 Found $(nrow(ridervg)) riders for $racehash")
    else
        println("   📊 Using all $(nrow(ridervg)) riders")
    end
    
    # Step 2: Get PCS rankings with caching
    println("2️⃣ Fetching PCS rankings...")
    rideroneday = getpcsranking(racesex, racecategory; cache_config=race_cache)
    println("   📊 Retrieved PCS data for $(nrow(rideroneday)) riders")
    
    # Step 3: Attempt to get betting odds
    println("3️⃣ Attempting to fetch betting odds...")
    try
        riderodds = getodds(betfairurl; cache_config=race_cache)
        println("   ✅ Successfully retrieved odds for $(nrow(riderodds)) riders")
        odds_available = true
    catch e
        println("   ⚠️ Odds fetch failed: $e")
        println("   💡 Continuing without odds data")
        riderodds = DataFrame()
        odds_available = false
    end
    
    # Step 4: Combine datasets
    println("4️⃣ Combining data sources...")
    riderdf = leftjoin(ridervg, rideroneday, on=:riderkey, makeunique=true)
    
    if odds_available && nrow(riderodds) > 0
        riderdf = leftjoin(riderdf, riderodds, on=:riderkey, makeunique=true)
    end
    
    # Clean up column names
    riderdf = rename(riderdf, :points => :vgpoints, :cost => :vgcost)
    if hasproperty(riderdf, :rank)
        riderdf = rename(riderdf, :rank => :pcsrank)
    end
    if hasproperty(riderdf, :points_1)
        riderdf = rename(riderdf, :points_1 => :pcspoints)
    end
    
    # Handle missing values
    for col in names(riderdf)
        if eltype(riderdf[!, col]) >: Missing
            if col in ["odds"]
                riderdf[ismissing.(riderdf[!, col]), col] .= 10.0  # Default high odds
            else
                riderdf[ismissing.(riderdf[!, col]), col] .= 0
            end
        end
    end
    
    println("   ✅ Combined dataset: $(nrow(riderdf)) riders, $(ncol(riderdf)) variables")
    
catch e
    println("❌ Manual analysis setup failed: $e")
    riderdf = DataFrame()
end
```

## Custom Scoring and Team Selection

```{julia}
if @isdefined(riderdf) && nrow(riderdf) > 0
    println("🧮 Calculating custom rider scores...")
    
    # Calculate probability of win if odds available
    if hasproperty(riderdf, :odds)
        riderdf[!, :pwin] = 1 ./ riderdf[!, :odds]
    else
        riderdf[!, :pwin] = zeros(nrow(riderdf))
    end
    
    # Normalize key metrics for comparison
    for col in [:vgpoints, :pcspoints, :pwin]
        if hasproperty(riderdf, col) && sum(riderdf[!, col]) > 0
            riderdf[!, Symbol("z", col)] = StatsBase.zscore(riderdf[!, col])
        else
            riderdf[!, Symbol("z", col)] = zeros(nrow(riderdf))
        end
    end
    
    # Custom scoring weights (adjust as needed)
    vg_weight = 0.4      # VeloGames current season points
    pcs_weight = 0.4     # PCS professional rankings  
    odds_weight = 0.2    # Betting market sentiment
    
    # Calculate composite score
    riderdf[!, :calcscore] = (vg_weight .* riderdf[!, :zvgpoints] .+ 
                             pcs_weight .* riderdf[!, :zpcspoints] .+
                             odds_weight .* riderdf[!, :zpwin])
    
    # Calculate value (score per cost)
    riderdf[!, :calcvalue] = riderdf[!, :calcscore] ./ riderdf[!, :vgcost]
    
    println("   ✅ Scoring complete using weights: VG($vg_weight), PCS($pcs_weight), Odds($odds_weight)")
    
    # Optional: Manual adjustments for riders you don't fancy
    unfancied = String[]  # Add rider names here if needed
    for rider in unfancied
        mask = occursin.(rider, riderdf.rider)
        riderdf.calcscore[mask] .= 0
        if sum(mask) > 0
            println("   👎 Manually zeroed score for: $rider")
        end
    end
    
    # Optimize team using new function
    println("🎯 Optimizing team selection...")
    try
        team_solution = buildmodeloneday(riderdf, 6, :calcscore, :vgcost; totalcost=100)
        
        if team_solution !== nothing
            riderdf[!, :chosen] = team_solution .> 0.5
            manual_team = filter(:chosen => ==(true), riderdf)
            
            println("   ✅ Manual optimization successful!")
            println("   👥 Selected $(nrow(manual_team)) riders")
            println("   💰 Total cost: $(sum(manual_team.vgcost)) credits")
            
        else
            println("   ⚠️ No feasible solution found")
            manual_team = DataFrame()
        end
    catch e
        println("   ❌ Optimization failed: $e")
        manual_team = DataFrame()
    end
    
else
    println("⚠️ No data available for manual analysis")
    manual_team = DataFrame()
end
```

## Analysis Results

### Top Riders by Value

```{julia}
if @isdefined(riderdf) && nrow(riderdf) > 0
    println("💎 Top 10 Riders by Value (Score/Cost):")
    top_value = sort(riderdf, :calcvalue, rev=true)[1:min(10, nrow(riderdf)), :]
    display_cols = intersect([:rider, :team, :vgcost, :vgpoints, :calcvalue], names(top_value))
    show(top_value[:, display_cols], allrows=true)
end
```

### Selected Team

```{julia}
if @isdefined(manual_team) && nrow(manual_team) > 0
    println("\n🏆 Final Selected Team:")
    display_cols = intersect([:rider, :team, :vgcost, :vgpoints, :calcscore], names(manual_team))
    selected_display = manual_team[:, display_cols]
    selected_display.team = replace.(selected_display.team, "|" => "-")  # Clean display
    show(sort(selected_display, :vgcost, rev=true), allrows=true)
    
    println("\n📊 Team Summary:")
    println("   Total Cost: $(sum(manual_team.vgcost))/100 credits")
    println("   Team Size: $(nrow(manual_team)) riders")
    println("   Average Cost: $(round(sum(manual_team.vgcost)/nrow(manual_team), digits=1)) credits/rider")
end
```

# 🎯 Summary

This updated notebook demonstrates the new VeloGames package capabilities:

- ✅ **Automated optimization** with `solverace()` function
- ✅ **Advanced caching** for efficient data retrieval  
- ✅ **Multi-source integration** combining VG, PCS, and odds data
- ✅ **Robust error handling** with graceful fallbacks
- ✅ **Flexible weighting** strategies for different approaches
- ✅ **Custom scoring** for advanced analysis scenarios

The automated approach provides quick, reliable results while the manual approach offers full control for custom analysis scenarios.
