---
title: "The Perfect Fantasy Giro Team: A Hindsight Analysis"
subtitle: "Uncovering the best possible team, the best value riders, and the biggest busts from the race."
format:
  html:
    code-fold: false
    toc: true
---

Every year, fantasy cycling aficionados meticulously pick a team of nine riders, hoping to conquer the Grand Tours. We sweat over budgets, agonize over sprinters versus climbers, and celebrate every breakaway point. But once the race is over and the winner is crowned, a tantalizing question remains: what was the *best possible* team you could have picked?

This analysis looks back at a recent Giro d'Italia to answer that question. With the benefit of perfect hindsight, we'll use the final race results to build the ultimate fantasy team, see how it stacks up against the actual winning score, and dive deep into which riders provided the most (and least) value.

```{julia}
#| echo: false
#| output: false

using Velogames, DataFrames, MarkdownTables, Plots, Printf, JuMP, HiGHS, StatsPlots, Statistics

plotlyjs()

# Race configuration
ridersurl = "https://www.velogames.com/italy/2025/riders.php"
winnername = "Giallo in Rosa"
bestteamscore = 9231

# Create stage race analysis cache with longer expiry for historical data
stage_analysis_cache = CacheConfig("/tmp/giro_historical", 24, true)

# Data loading and initial processing
allriderdata = getvgriders(ridersurl; cache_config=stage_analysis_cache)
rider_names = collect(allriderdata.rider)
pcs_df = getpcsriderpts_batch(rider_names; cache_config=stage_analysis_cache)
vg_class_to_pcs_col = Dict(
    "allrounder" => "gc",
    "climber" => "climber",
    "sprinter" => "sprint",
    "unclassed" => "oneday"
)
add_pcs_speciality_points!(allriderdata, pcs_df, vg_class_to_pcs_col)

# Set up the optimization model for the best possible team
model = JuMP.Model(HiGHS.Optimizer)
JuMP.set_silent(model)
JuMP.@variable(model, x[allriderdata.rider], Bin)
JuMP.@objective(model, Max, allriderdata.points' * x)
JuMP.@constraint(model, allriderdata.cost' * x <= 100)
JuMP.@constraint(model, sum(x) == 9)
JuMP.@constraint(model, allriderdata.allrounder' * x >= 2)
JuMP.@constraint(model, allriderdata.sprinter' * x >= 1)
JuMP.@constraint(model, allriderdata.climber' * x >= 2)
JuMP.@constraint(model, allriderdata.unclassed' * x >= 3)
JuMP.optimize!(model)
modelresults = JuMP.value.(x)
allriderdata.chosen = modelresults.data .> 0.5
chosenteam = filter(row -> row.chosen, allriderdata)

# Set up cost minimization model
costmodel = JuMP.Model(HiGHS.Optimizer)
JuMP.set_silent(costmodel)
JuMP.@variable(costmodel, x[allriderdata.rider], Bin)
JuMP.@objective(costmodel, Min, allriderdata.cost' * x)
JuMP.@constraint(costmodel, allriderdata.points' * x >= bestteamscore + 1)
JuMP.@constraint(costmodel, sum(x) == 9)
@constraint(costmodel, allriderdata.allrounder' * x >= 2)
@constraint(costmodel, allriderdata.sprinter' * x >= 1)
@constraint(costmodel, allriderdata.climber' * x >= 2)
@constraint(costmodel, allriderdata.unclassed' * x >= 3)
JuMP.optimize!(costmodel)
costresults = JuMP.value.(x)
allriderdata.chosen2 = costresults.data .> 0.5
chosen2team = filter(row -> row.chosen2, allriderdata)
```

## The Target: Beating the Winner

The winning team in our league, **`{julia} winnername`**, put up a massive score of **`{julia} bestteamscore`** points. This is the benchmark for our retrospective analysis.

## The Dream Team: The Best Possible Squad

With perfect hindsight, we can determine the highest-scoring combination of nine riders that fits within the budget and classification rules. The analysis reveals a "dream team" that would have scored a staggering **`{julia} sum(chosenteam.points)`** points, costing **`{julia} sum(chosenteam.cost)`** credits. That's **`{julia} sum(chosenteam.points) - bestteamscore`** points more than the league winner!

Here is the ultimate team:

```{julia}
#| echo: false

# Create and display the dream team table
displaytable = rename(chosenteam, :rider => :Rider, :team => :Team,
    :cost => :Cost, :points => :Score, :class => :Class)
markdown_table(displaytable[:, [:Rider, :Team, :Class, :Cost, :Score]])
```

## The Bargain Hunter's Team: Cheapest Way to Win

While the dream team is impressive, what's the *cheapest* squad that still would have beaten the winner's score? Our analysis found a team that would have scored **`{julia} sum(chosen2team.points)`** points, just enough to take the crown, but for only **`{julia} sum(chosen2team.cost)`** credits.

Here is the most cost-effective winning team:

```{julia}
#| echo: false

displaytable2 = rename(chosen2team, :rider => :Rider, :team => :Team,
    :cost => :Cost, :points => :Score, :class => :Class)
markdown_table(displaytable2[:, [:Rider, :Team, :Class, :Cost, :Score]])
```

# Rider Value Analysis

Which riders punched above their weight, and who were the expensive disappointments? This chart plots every rider's cost against the points they scored, giving a clear view of their value.

```{julia}
#| echo: false

# Enhanced scatter plot of points vs cost with classification coloring
allriderdata.value = allriderdata.points ./ allriderdata.cost

# Create hover text with enhanced information
hovertext = allriderdata.rider .* " (" .* allriderdata.team .* ")" .*
            "<br>Class: " .* allriderdata.class .*
            "<br>VG: " .* string.(allriderdata.points) .* " pts"

# Color by classification
colors = map(allriderdata.class) do class
    if class == "All rounder"
        "red"
    elseif class == "Sprinter"
        "green"
    elseif class == "Climber"
        "blue"
    else
        "gray"
    end
end

scatter(
    allriderdata.cost .+ randn(length(allriderdata.cost)) * 0.2,
    allriderdata.points,
    # color=colors,
    group=allriderdata.class,
    title="Rider Value by Classification", xlabel="Cost (credits)", ylabel="VeloGames Points",
    alpha=0.6, hover=hovertext,
    xticks=[4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28],
    markersize=4
)
```

## Where to Spend Your Credits?

That scatter plot is great for spotting individual riders, but what can it tell us about overall strategy? By breaking the data down by cost and rider classification, we can uncover some key trends that could inform future fantasy picks.

### Performance by Cost Bracket

First, let's see if the expensive, big-name riders were actually worth their price tag. We've grouped all riders into three cost brackets to see how they performed on average.

```{julia}
#| echo: false

# Define cost brackets
function get_bracket(cost)
    if cost >= 12
        "Premium (12+)"
    elseif cost >= 8
        "Mid-Range (8-11)"
    else
        "Budget (<8)"
    end
end

allriderdata.cost_bracket = get_bracket.(allriderdata.cost)

# Group by bracket and calculate average stats
cost_bracket_analysis = combine(groupby(allriderdata, :cost_bracket),
    :points => mean => :avg_points,
    :cost => mean => :avg_cost,
    nrow => :num_riders
)

# Calculate points per credit for the bracket
cost_bracket_analysis.avg_value = cost_bracket_analysis.avg_points ./ cost_bracket_analysis.avg_cost

# Format for display
rename!(cost_bracket_analysis,
    :cost_bracket => "Cost Bracket",
    :num_riders => "Riders",
    :avg_cost => "Avg. Cost",
    :avg_points => "Avg. Score",
    :avg_value => "Avg. Value (Score/Cost)"
)
cost_bracket_analysis[!, "Avg. Cost"] = round.(cost_bracket_analysis[!, "Avg. Cost"], digits=1)
cost_bracket_analysis[!, "Avg. Score"] = round.(cost_bracket_analysis[!, "Avg. Score"], digits=1)
cost_bracket_analysis[!, "Avg. Value (Score/Cost)"] = round.(cost_bracket_analysis[!, "Avg. Value (Score/Cost)"], digits=2)

markdown_table(cost_bracket_analysis)
```

### Value by Rider Class

Next, which type of rider provided the best value? The chart below shows the distribution of "value" (points per credit) for each of the four rider classifications.

```{julia}
#| echo: false

plotdata = dropmissing(select(allriderdata, :class, :value))

@df plotdata boxplot(:class, :value,
    group=:class,
    legend=false,
    title="Value Distribution by Rider Class",
    xlabel="Rider Class",
    ylabel="Value (Points per Credit)"
)
```

## Top Value Riders

The highest value riders scored the most points per credit. Here are the top 20 riders who gave the most bang for your buck.

```{julia}
#| echo: false

# Sort by value and create rankings
valuetable = sort(allriderdata, :value, rev=true)

# Create value table with enhanced information
valuetable = select(valuetable, :rider => :Rider, :team => :Team,
    :class => :Class, :cost => :Cost, :points => :Score, :value => :Value)
valuetable[!, :Value] = round.(valuetable[!, :Value], digits=2)
valuetable[!, :Rank] = 1:nrow(valuetable)
markdown_table(valuetable[1:20, [:Rider, :Team, :Class, :Cost, :Score, :Value]])
```

### Best All-Rounders

Two all-rounders were required in each team. The best value picks were:

```{julia}
#| echo: false

# Filter all-rounders and show top performers
allrounders = filter(row -> row.Class == "allrounder", valuetable)
if nrow(allrounders) > 0
    markdown_table(allrounders[1:min(5, nrow(allrounders)), [:Rank, :Rider, :Team, :Cost, :Score, :Value]])
else
    println("⚠️ No all-rounders found in data")
end
```

### Best Climbers

Two climbers were required. The best value climbers were:

```{julia}
#| echo: false

# Filter climbers and show top performers
climbers = filter(row -> row.Class == "climber", valuetable)
if nrow(climbers) > 0
    markdown_table(climbers[1:min(5, nrow(climbers)), [:Rank, :Rider, :Team, :Cost, :Score, :Value]])
else
    println("⚠️ No climbers found in data")
end
```

### Best Sprinters

One sprinter was required. The best value sprinters were:

```{julia}
#| echo: false

# Filter sprinters and show top performers
sprinters = filter(row -> row.Class == "sprinter", valuetable)
if nrow(sprinters) > 0
    markdown_table(sprinters[1:min(5, nrow(sprinters)), [:Rank, :Rider, :Team, :Cost, :Score, :Value]])
else
    println("⚠️ No sprinters found in data")
end
```

## Worst Value Analysis

Not every pick can be a winner. Here we look at the riders who didn't live up to their price tag.

### Expensive Failures

These riders cost at least 6 credits but scored zero points.

```{julia}
#| echo: false

# Filter expensive riders with zero scores
zero_score_riders = filter(row -> row.Score == 0 && row.Cost >= 6, valuetable)
if nrow(zero_score_riders) > 0
    markdown_table(zero_score_riders[:, [:Rank, :Rider, :Team, :Class, :Cost, :Score]])
end
```

### Lowest Value Performers

Finally, these are the riders who, despite scoring some points, delivered the worst value for their cost.

```{julia}
#| echo: false

non_zero_score_riders = filter(row -> row.Score > 0, valuetable)
if nrow(non_zero_score_riders) >= 6
    markdown_table(non_zero_score_riders[end-5:end, [:Rank, :Rider, :Team, :Class, :Cost, :Score, :Value]])
end
```
