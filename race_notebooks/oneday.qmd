---
title: "One-day"
---

```{julia}
using Velogames, DataFrames, Statistics, StatsBase

raceurl = "https://www.velogames.com/sixes-superclasico/2024/riders.php"
lastyearurl = "https://www.velogames.com/sixes-superclasico/2023/riders.php"
# lastyearraceurl = "https://www.velogames.com/sixes-superclasico/2023/ridescore.php?ga=13&st=27"
# betfairurl = "https://www.betfair.com/betting/cycling/gp-de-quebec/outright-betting/mwe-924.419811627"
racehash = "#GPMontreal"
racesex = "me"
racecategory = "one-day-races"
```

# Retrieve data

Data is scraped from the [Velogames website](https://www.velogames.com/). Rider scores are the number of points they have accumulated in the current season.

```{julia}
ridervg = getvgriders(raceurl, fetchagain=true)
ridervg_prevyear = getvgriders(lastyearurl, fetchagain=true)
# ridervg_prevrace = getvgriders(lastyearraceurl, fetchagain=true)

# keep only riders in the startlist for for the race
ridervg = ridervg[ridervg.startlist.==racehash, :]

# get PCS rankings
rideroneday = getpcsranking(racesex, racecategory)

# get Betfair odds
# riderodds = getodds(betfairurl)
```

Manually enter the Betfair odds now that the scraper has been broken by the Betfair website's switch to AJAX loading. Save the Betfair odds to a text file and run this to read it in.

```{julia}
# Read the text from the file
filepath = "oddsfile.csv"
lines = readlines(filepath)

# Drop all empty strings from lines
lines = filter(x -> !isempty(strip(x)), lines)

# Initialize arrays to store names and odds
riders = String[]
odds = String[]

# Process the lines
for (i, line) in enumerate(lines)
    if isodd(i)
        push!(riders, strip(line))
    else
        push!(odds, strip(line))
    end
end

# Create a DataFrame
riderodds = DataFrame(name = riders, odds = odds)

# Calculate decimal odds from strings of the form "1/2"
riderodds.odds = map(x -> 1 + parse(Float64, split(x, "/")[1]) / parse(Float64, split(x, "/")[2]), riderodds.odds)

# Tweak the rider names for better matching with Velogames
riderodds.name = replace.(riderodds.name, "Tom Pidcock" => "Thomas Pidcock")

# Add a riderkey column based on the name
riderodds.riderkey = map(x -> createkey(x), riderodds.name)
```

## Combine datasets

```{julia}
# join all three datasets on riderkey
riderdf = leftjoin(ridervg, rideroneday, on=:riderkey, makeunique=true)
riderdf = leftjoin(riderdf, riderodds, on=:riderkey, makeunique=true)
riderdf = leftjoin(riderdf, ridervg_prevyear[!, [:riderkey, :points]], on=:riderkey, makeunique=true)

# drop column names ending with _1 or _2
# keeps PREVIOUS season's points. Switch to using :points for current season.
rename!(
    riderdf,
    :points_2 => :prevpoints,
    :points => :vgpoints,
    :cost => :vgcost,
    :rank => :pcsrank,
    :points_1 => :pcspoints,
    :value => :vgvalue,
)
cols_to_drop = [name for name in names(riderdf) if endswith(string(name), "_1") || endswith(string(name), "_2")]
select!(riderdf, Not(cols_to_drop))

# fill in missing values with a default
for col in [:pcsrank, :pcspoints, :vgpoints, :prevpoints, :odds]
    riderdf[ismissing.(riderdf[!, col]), col] .= ifelse(col == :odds, maximum(skipmissing(riderdf[!, col])), minimum(skipmissing(riderdf[!, col])))
end

# convert odds to probability of win and normalize columns
riderdf[!, :pwin] = 1 ./ riderdf[!, :odds]
disallowmissing!(riderdf, [:vgpoints, :pcspoints, :prevpoints])
# for col in [:vgpoints, :prevpoints, :pcspoints]
for col in [:pwin, :vgpoints, :prevpoints, :pcspoints]
    riderdf[!, Symbol("z", col)] = StatsBase.zscore(riderdf[!, col])
end
```

## Calculate rider score and value

```{julia}
# weights for inv odds, vgpoints, prevvgpoints, pcspoints
WEIGHTS = [1, 0, 0, 0]
# zvalues = [:zvgpoints, :zprevpoints, :zpcspoints]
zvalues = [:zpwin, :zvgpoints, :zprevpoints, :zpcspoints]

# calculate rider calcscore as the mean of the velogames score and the PCS score
zweights = WEIGHTS ./ sum(WEIGHTS)
riderdf[!, :calcscore] = zeros(size(riderdf, 1))
for (weight, value) in zip(zweights, zvalues)
    riderdf[!, :calcscore] .+= weight .* riderdf[!, value]
end

# calculate rider value as the ratio of rider score to rider cost
riderdf.calcvalue = riderdf.calcscore ./ riderdf.vgcost

riderdf
```

# Inspect the data

## Top 10 riders by points

```{julia}
sort(riderdf, :vgpoints, rev=true)[1:10, :]
```

## Top 10 riders by value

```{julia}
sort(riderdf, :calcvalue, rev=true)[1:10, Not(:riderkey)]
```

# Thumb on the scales

Set the rider score to 0 for riders you don't fancy.

```{julia}
unfancied = ["Wilco Kelderman"]
for rider in unfancied
    riderdf.calcscore[occursin.(rider, riderdf.rider)] .= 0
end
```

# Results

## Total cost of team

Must be no more than 100.

```{julia}
modelresults = buildmodeloneday(riderdf, 6, :calcscore, :vgcost)

# total cost
riderdf.vgcost .* modelresults.data |> sum
```

## Selected riders

```{julia}
# selected riders
riderdf[!, :chosen] = modelresults.data .|> !iszero
chosenteam = filter(row -> row.chosen, riderdf)
sort(chosenteam, :vgcost, rev=true)[:, [:rider, :team, :vgcost, :vgpoints, :prevpoints, :calcvalue]]
```
