---
title: 'Velogames solver: Giro d''Italia 2023'
jupyter: julia-1.9
---


## Load libraries


```{julia}
using Velogames
```

## Load data

```{julia}
FORMWEIGHT = 0

riderdf = getvgriders("https://www.velogames.com/italy/2023/riders.php")

mycols = [:mountainme, :gcme, :sprintme, :overallme]
# getpcsranking for each col, filter the dataframe to only the points and riderkey columns, and rename the points column to the col name.
pcsdfs = map(mycols) do col
    rename(getpcsranking(col), :points => col)[:, [col, :riderkey]]
end

# use reduce to join all dataframes in pcsdfs on the riderkey column
pcsdf = reduce((x, y) -> outerjoin(x, y, on=:riderkey), pcsdfs)

# join the velogames and pcs dataframes on the riderkey column
riderdf = leftjoin(riderdf, pcsdf, on=:riderkey)
riderdf = coalesce.(riderdf, 0)

# create calcpcsscore column which is the sum of All Rounder * gc, Sprinter * sprint, Climber * mountain, and Unclassed * overall
riderdf.calcpcsscore = riderdf.allrounder .* riderdf.gcme .+ riderdf.sprinter .* riderdf.sprintme .+ riderdf.climber .* riderdf.mountainme .+ riderdf.unclassed .* riderdf.overallme

# create calcscore column which is a weighted average of the calcpcsscore and points columns, adjusted for the difference in magnitude
ADJFACTOR = mean(riderdf.points) / mean(riderdf.calcpcsscore)
riderdf.calcscore = (1 - FORMWEIGHT) .* ADJFACTOR .* riderdf.calcpcsscore .+ FORMWEIGHT .* riderdf.points
```

```{julia}
riderdf = getvgriders("https://www.velogames.com/italy/2023/riders.php")
```

```{julia}
# for each rider, get pcsriderpts for that rider
pcsriderpts = map(x -> getpcsriderpts(x), riderdf.rider)
```

```{julia}
dfpcsriderpts = vcat(DataFrame.(riderdf.pcsriderpts)...)
rename!(
    dfpcsriderpts, 
    [x => "pts" * string(x) for x in names(dfpcsriderpts)]
    )
# hcat(riderdf, dfpcsriderpts)
```

```{julia}
show(riderdf)
```


## Build model

```{julia}
modelresults = buildmodelstage(riderdf);
```

```{julia}
modelresults.data |> sum
```

```{julia}
# total cost
riderdf.cost .* modelresults.data |> sum
```

## Results

```{julia}
# selected riders
riderdf[!, :chosen] = modelresults.data .> 0.5
chosenteam = filter(:chosen => ==(true), riderdf)
chosenteam[:, [:rider, :team, :classraw, :selected, :points, :calcpcsscore, :cost]]
```



