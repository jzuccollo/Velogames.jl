---
title: "Tour de France 2025: A Fantasy Retrospective"
subtitle: "A fantasy retrospective on the key performers and the perfect team"
format:
  html:
    code-fold: false
    toc: true
---

The Tour de France 2025 is over, and what a race it was! Now that the dust has settled in Paris, it's time to look back at the fantasy competition. Who were the riders that made the difference? Which high-cost stars delivered, and who would have formed the ultimate fantasy team with the benefit of hindsight?

```{julia}
#| echo: false
#| output: false
#| cache: true

using Velogames, DataFrames, MarkdownTables, Plots, Printf, JuMP, HiGHS, StatsPlots, Statistics

plotly() # Use Plotly backend for interactive plots

# Race configuration - Tour de France 2025 Final analysis
ridersurl = "https://www.velogames.com/velogame/2025/riders.php"
league_winner = "Marc Rediot"
winning_score = 11048

# Create TDF final analysis cache
tdf_final_cache = CacheConfig("/tmp/tdf_final_2025", 6, true)

# Data loading and initial processing
allriderdata = getvgriders(ridersurl; cache_config=tdf_final_cache)
rider_names = collect(allriderdata.rider)
pcs_df = getpcsriderpts_batch(rider_names; cache_config=tdf_final_cache)
vg_class_to_pcs_col = Dict(
    "allrounder" => "gc",
    "climber" => "climber",
    "sprinter" => "sprint",
    "unclassed" => "oneday"
)
add_pcs_speciality_points!(allriderdata, pcs_df, vg_class_to_pcs_col)

# Set up the optimization model for the best possible team using final results
println("Starting optimization with $(nrow(allriderdata)) riders")
println("Total points available: $(sum(allriderdata.points))")
println("Riders with points > 0: $(sum(allriderdata.points .> 0))")
println("Cost range: $(minimum(allriderdata.cost)) - $(maximum(allriderdata.cost))")

# Check data quality before optimization
if any(ismissing.(allriderdata.points)) || any(ismissing.(allriderdata.cost))
    println("⚠️ Warning: Missing values detected in points or cost columns")
end

# Let's also try to understand the optimization problem better
println("\nDebug: Examining class structure...")
println("Unique classes in data: $(unique(allriderdata.class))")

# Fix class name mismatch - the optimization function expects title case
class_mapping = Dict(
    "allrounder" => "All rounder",
    "climber" => "Climber",
    "sprinter" => "Sprinter",
    "unclassed" => "Unclassed"
)

println("Fixing class names for optimization...")
allriderdata.class = [get(class_mapping, class, class) for class in allriderdata.class]
println("Updated classes: $(unique(allriderdata.class))")

solution = buildmodelhistorical(allriderdata, 9, :points, :cost; totalcost=100)
if solution !== nothing
    chosen_values = [solution[rider] > 0.5 for rider in allriderdata.rider]
    allriderdata.chosen = chosen_values
    chosenteam = filter(row -> row.chosen, allriderdata)
    println("✅ Optimization successful: Found team with $(sum(chosenteam.points)) points, costing $(sum(chosenteam.cost)) credits")
else
    # More detailed diagnostic information if optimization fails
    println("❌ Optimization failed.")
    println("\nDetailed diagnostic information:")
    println("Data summary:")
    println("- Total riders: $(nrow(allriderdata))")
    println("- Points range: $(minimum(allriderdata.points)) - $(maximum(allriderdata.points))")
    println("- Cost range: $(minimum(allriderdata.cost)) - $(maximum(allriderdata.cost))")
    println("- Unique classes: $(unique(allriderdata.class))")

    # Check if we have riders in each required class (use actual class names from data)
    class_counts = combine(groupby(allriderdata, :class), nrow => :count)
    println("\nClass distribution:")
    for row in eachrow(class_counts)
        println("  - $(row.class): $(row.count) riders")
    end

    # The issue might be that the class names don't match what the function expects
    # Let's manually check what classes we actually have
    expected_classes = ["All rounder", "Climber", "Sprinter", "Unclassed"]
    actual_classes = unique(allriderdata.class)
    println("\nClass name matching:")
    println("Expected classes: $(expected_classes)")
    println("Actual classes: $(actual_classes)")

    missing_classes = setdiff(expected_classes, actual_classes)
    if !isempty(missing_classes)
        println("❌ Missing expected classes: $(missing_classes)")
        println("This is likely why optimization failed!")
    end

    # Proceed with fallback analysis without optimization
    println("\nProceeding with analysis using top performers instead of optimal team...")
    chosenteam = sort(allriderdata, :points, rev=true)[1:9, :]
    allriderdata.chosen = [rider in chosenteam.rider for rider in allriderdata.rider]
    println("Fallback team total points: $(sum(chosenteam.points))")
end

# Calculate current value and identify standout performers

# Let's also check constraint feasibility for debugging
println("Constraint feasibility check:")
println("Can we form a valid team?")

# Check if we can satisfy class constraints with budget - using corrected class names
allrounder_riders = filter(row -> row.class == "All rounder", allriderdata)
climber_riders = filter(row -> row.class == "Climber", allriderdata)
sprinter_riders = filter(row -> row.class == "Sprinter", allriderdata)
unclassed_riders = filter(row -> row.class == "Unclassed", allriderdata)

println("Available riders by class:")
println("- All rounders: $(nrow(allrounder_riders))")
if nrow(allrounder_riders) >= 2
    println("  Cheapest 2: $(sort(allrounder_riders.cost)[1:2])")
end
println("- Climbers: $(nrow(climber_riders))")
if nrow(climber_riders) >= 2
    println("  Cheapest 2: $(sort(climber_riders.cost)[1:2])")
end
println("- Sprinters: $(nrow(sprinter_riders))")
if nrow(sprinter_riders) >= 1
    println("  Cheapest: $(minimum(sprinter_riders.cost))")
end
println("- Unclassed: $(nrow(unclassed_riders))")
if nrow(unclassed_riders) >= 4
    println("  Cheapest 4: $(sort(unclassed_riders.cost)[1:4])")
end

# Check minimum cost for a valid team (2 AR, 2 C, 1 S, 4 U)
if nrow(allrounder_riders) >= 2 && nrow(climber_riders) >= 2 && nrow(sprinter_riders) >= 1 && nrow(unclassed_riders) >= 4
    min_cost = sum(sort(allrounder_riders.cost)[1:2]) + sum(sort(climber_riders.cost)[1:2]) + minimum(sprinter_riders.cost) + sum(sort(unclassed_riders.cost)[1:4])
    println("Minimum cost for a valid team: $(min_cost)")
else
    println("❌ Insufficient riders in one or more classes!")
end

# Find the cheapest team that would have won the league
cheapest_winning_solution = minimisecostforteam(allriderdata, :points, :cost; min_points=winning_score + 1)
if cheapest_winning_solution !== nothing
    cheapest_chosen_values = [cheapest_winning_solution[rider] > 0.5 for rider in allriderdata.rider]
    allriderdata.cheapest_chosen = cheapest_chosen_values
    cheapest_winning_team = filter(row -> row.cheapest_chosen, allriderdata)
    println("✅ Cheapest winning team found: Cost $(sum(cheapest_winning_team.cost)), Points $(sum(cheapest_winning_team.points))")
else
    println("❌ Could not find a team that beats the winning score.")
    cheapest_winning_team = DataFrame() # empty dataframe
end
```


At the end of three weeks of thrilling racing, **`{julia} league_winner`** won our fantasy league with a massive **`{julia} winning_score`** points. Their victory was built on a shrewd selection of riders who consistently performed across the entire race.

# The benefit of hindsight

## The perfect final team

With the benefit of knowing how the entire race played out, what would the optimal team have looked like? Using optimization, we can determine the highest-scoring combination of nine riders that fits within the budget and classification rules.

The perfect final team would have scored `{julia} (sum(chosenteam.points))` points, costing `{julia} (sum(chosenteam.cost))` credits. That's `{julia} (sum(chosenteam.points) - winning_score)` points more than our league winner!

```{julia}
#| echo: false

# Create and display the team table
perfect_team_display = rename(chosenteam, :rider => :Rider, :team => :Team,
    :cost => :Cost, :points => :FinalPoints, :class => :Class)
perfect_team_display[!, :FinalPoints] = Int.(round.(perfect_team_display.FinalPoints))
perfect_team_display[!, :Value] = Int.(round.(perfect_team_display.FinalPoints ./ perfect_team_display.Cost))
markdown_table(perfect_team_display[:, [:Rider, :Team, :Class, :Cost, :FinalPoints, :Value]])
```

## The cheapest winning team

While the perfect team shows the maximum possible score, what's the *minimum* investment that could have secured victory in the Dulwich league? This section identifies the lowest-cost team that would have still beaten our league winner.

This team scores `{julia} sum(cheapest_winning_team.points)` points and costs just `{julia} sum(cheapest_winning_team.cost)` credits.

```{julia}
#| echo: false

if nrow(cheapest_winning_team) > 0
    # Create and display the cheapest winning team table
    cheapest_team_display = rename(cheapest_winning_team, :rider => :Rider, :team => :Team,
        :cost => :Cost, :points => :FinalPoints, :class => :Class)
    cheapest_team_display[!, :FinalPoints] = Int.(round.(cheapest_team_display.FinalPoints))
    cheapest_team_display[!, :Value] = Int.(round.(cheapest_team_display.FinalPoints ./ cheapest_team_display.Cost))
    markdown_table(cheapest_team_display[:, [:Rider, :Team, :Class, :Cost, :FinalPoints, :Value]])
else
    println("Could not determine the cheapest winning team.")
end
```

## Expensive disappointments

These high-cost riders didn't deliver the points their price tags demanded over the three weeks of racing:

```{julia}
#| echo: false

# Show expensive riders (8+ credits) with low points (under 200)
expensive_riders = filter(row -> row.cost >= 8, allriderdata)
disappointments = filter(row -> row.points < 200, expensive_riders)
disappointments_display = select(disappointments, :rider => :Rider, :team => :Team,
    :class => :Class, :cost => :Cost, :points => :FinalPoints)
disappointments_display[!, :FinalPoints] = Int.(round.(disappointments_display.FinalPoints))
disappointments_display[!, :Value] = Int.(round.(disappointments_display.FinalPoints ./ disappointments_display.Cost))

if nrow(disappointments) > 0
    markdown_table(disappointments_display)
else
    println("All expensive riders performed well!")
end
```

# Performance analysis

The race has given us insights into which types of riders and strategies paid off. Let's break down the performance by cost and classification to see what's working.

### Points vs Cost

First, let's look at the raw performance: how many points each rider scored versus their cost. This helps us identify the high-scorers at every price point.

```{julia}
#| echo: false
#| fig-cap: "Plot of final points versus rider cost, coloured by rider classification."
#| cache: true

# Jitter cost for better visibility
allriderdata.jittered_cost = allriderdata.cost .+ (rand(nrow(allriderdata)) .- 0.5) .* 0.3

# Create hover text with original cost
hover_text = [
    "$(row.rider)<br>Team: $(row.team)<br>Class: $(row.class)<br>Cost: $(row.cost)<br>Points: $(@sprintf("%.0f", row.points))<br>Value: $(@sprintf("%.1f", row.value))"
    for row in eachrow(allriderdata)
]

# Create the scatter plot for points vs cost
@df allriderdata scatter(
    :jittered_cost,
    :points,
    group=:class,
    markerstrokewidth=0,
    alpha=0.7,
    hover=hover_text,
    xlabel="Cost (Jittered)",
    ylabel="Final Points",
    title="Final Performance: Points vs Cost",
    legend=:topleft,
    size=(800, 600),
    dpi=300
)
```

The table below shows the top 15 point scorers from the race, who form the top end of the chart above.

```{julia}
#| echo: false

# Show top 15 point scorers from the whole race
top_scorers = sort(allriderdata, :points, rev=true)[1:15, :]
top_scorers_display = select(top_scorers, :rider => :Rider, :team => :Team,
    :class => :Class, :cost => :Cost, :points => :FinalPoints)
top_scorers_display[!, :FinalPoints] = Int.(round.(top_scorers_display.FinalPoints))
top_scorers_display[!, :Value] = Int.(round.(top_scorers_display.FinalPoints ./ top_scorers_display.Cost))
markdown_table(top_scorers_display)
```

### Value vs Cost

Next, we'll examine rider value (points per credit) against their cost. This view is crucial for identifying the most efficient, value-for-money riders in the game.

```{julia}
#| echo: false
#| fig-cap: "Plot of rider value (points per credit) versus cost, coloured by rider classification."
#| cache: true

# Create the scatter plot for value vs cost and ensure it is the last expression
p_value = @df allriderdata scatter(
    :jittered_cost,
    :value,
    group=:class,
    markerstrokewidth=0,
    alpha=0.7,
    hover=hover_text,
    xlabel="Cost (Jittered)",
    ylabel="Value (Points per Credit)",
    title="Final Value: Points/Cost vs Cost",
    legend=:topleft,
    size=(800, 600),
    dpi=300
)
p_value
```

These riders have outperformed their cost expectations, delivering exceptional value over the entire Tour. The table below shows all riders who achieved a value of over 100 points per credit.

```{julia}
#| echo: false

# Calculate value and show all riders with a value over 100
allriderdata.value = allriderdata.points ./ allriderdata.cost
high_value_performers = filter(row -> row.value > 100, allriderdata)
top_value = sort(high_value_performers, :value, rev=true)
top_value_display = select(top_value, :rider => :Rider, :team => :Team,
    :class => :Class, :cost => :Cost, :points => :FinalPoints)
top_value_display[!, :FinalPoints] = Int.(round.(top_value_display.FinalPoints))
top_value_display[!, :Value] = Int.(round.(top_value_display.FinalPoints ./ top_value_display.Cost))
markdown_table(top_value_display)
```
