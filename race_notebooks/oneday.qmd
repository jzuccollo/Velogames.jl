---
title: Velogames one-day race solver
date: 23/04/2023
format:
  html:
    code-fold: true
jupyter: julia-1.8
---

```{julia}
using Velogames, DataFrames, Statistics

race_url = "https://www.velogames.com/sixes-superclasico/2023/riders.php"
race_hash = "#Donostia"
race_sex = "me"
race_category = "one-day-races"
FORM_WEIGHT = 0
```

# Retrieve data

Data is scraped from the [Velogames website](https://www.velogames.com/). Rider scores are the number of points they have accumulated in the current season.

```{julia}
rider_vg = getvgriders(race_url)

# keep only riders in the startlist for for the race
rider_vg = rider_vg[rider_vg.startlist.==race_hash, :]
rider_oneday = pcs_df = getpcsranking(race_sex, race_category)
```

Combine datasets and calculate rider value.

```{julia}
rider_df = leftjoin(rider_vg, rider_oneday, on=:riderkey, makeunique=true)

# rename points to vgpoints
rename!(
    rider_df,
    :points => :vgpoints,
    :cost => :vgcost,
    :rank => :pcsrank,
    :points_1 => :pcspoints
)
# drop columns ending in _1
select!(rider_df, Not([:rider_1, :team_1]))

# fill in missing values in rank and points with 0
rider_df[ismissing.(rider_df.pcsrank), :pcsrank] .= 0
rider_df[ismissing.(rider_df.pcspoints), :pcspoints] .= 0
# calculate rider calc_score as the mean of the velogames score and the PCS score
ADJ_FACTOR = mean(rider_df.vgpoints) / mean(rider_df.pcspoints)
rider_df[!, :calc_score] = (1 - FORM_WEIGHT) .* ADJ_FACTOR .* rider_df.pcspoints .+ FORM_WEIGHT .* rider_df.vgpoints
# # calculate rider value as the ratio of rider score to rider cost
rider_df[!, :calc_value] = rider_df.calc_score ./ rider_df.vgcost

rider_df
```

# Inspect the data

## Top 10 riders by points

```{julia}
sort(rider_df, :calc_score, rev=true)[1:10, :]
```

## Top 10 riders by value

```{julia}
sort(rider_df, :calc_value, rev=true)[1:10, :]
```

# Build the model

```{julia}
model_results = build_model_oneday(rider_df, 6, :calc_score, :vgcost)
```

# Results

## Total cost of team

Must be no more than 100.

```{julia}
# total cost
rider_df.vgcost .* model_results.data |> sum
```

## Selected riders

```{julia}
# selected riders
rider_df[!, :chosen] = model_results.data .|> !iszero
chosen_team = filter(:chosen => ==(true), rider_df)
chosen_team[:, [:rider, :team, :vgcost, :vgpoints, :pcspoints, :pcsrank, :calc_score, :calc_value]]
```

