---
title: "Historical analysis"
subtitle: "Milano-Sanremo 2024"
---

Looking back on the race, what's the best team you could have picked? And what's the cheapest team you could have picked that would have beaten the best team?

```{julia}
using Velogames, DataFrames, HiGHS, JuMP, MarkdownTables

riderseriesurl = "https://www.velogames.com/sixes-superclasico/2024/riders.php"
riderraceurl = "https://www.velogames.com/sixes-superclasico/2024/ridescore.php?ga=13&st=1"
racehash = "#MilanoSanremo"
bestteamscore = 1908;
```

# Best team you could have picked

```{julia}
#| output: false

# get the rider data
ridervgpost = getvgriders(riderseriesurl)
ridervgpost = ridervgpost[ridervgpost.startlist.==racehash, :]

# this will only be needed for individual rounds of a longer series
riderracepoints = getvgracepoints(riderraceurl)

# join the datasets on riderkey
allriderdata = leftjoin(ridervgpost, riderracepoints, on=:riderkey, makeunique=true)
allriderdata = coalesce.(allriderdata, 0)
allriderdata.scoreperpoint = allriderdata.score ./ allriderdata.cost

modelpost = JuMP.Model(HiGHS.Optimizer)
JuMP.set_silent(modelpost)
JuMP.@variable(modelpost, x[allriderdata.rider], Bin)
# this will variously be points or scores depending whether it's a race or series
JuMP.@objective(modelpost, Max, allriderdata.score' * x) # maximise the total score. 
JuMP.@constraint(modelpost, allriderdata.cost' * x <= 100) # cost must be <= 100
JuMP.@constraint(modelpost, sum(x) == 6) # exactly 6 riders must be chosen
# @constraint(modelpost, ridervgpost.allrounder' * x >= 2) # at least 2 must be all rounders
# @constraint(modelpost, ridervgpost.sprinter' * x >= 1) # at least 1 must be a sprinter
# @constraint(modelpost, ridervgpost.climber' * x >= 2) # at least 2 must be climbers
# @constraint(modelpost, ridervgpost.unclassed' * x >= 3) # at least 3 must be unclassed
JuMP.optimize!(modelpost)
modelpostresults = JuMP.value.(x)

allriderdata.chosen = modelpostresults.data .> 0.5
chosenteampost = filter(row -> row.chosen, allriderdata)
```

With the benefit of hindsight, the best team you could have picked scored `{julia} chosenteampost.score |> sum` points and cost `{julia} chosenteampost.cost |> sum` points:

```{julia}
markdown_table(chosenteampost[:, [:rider, :team, :cost, :score, :scoreperpoint]])
```

# Cheapest team that would have beaten the best team

```{julia}
#| output: false

modelpost2 = JuMP.Model(HiGHS.Optimizer)
JuMP.set_silent(modelpost2)
JuMP.@variable(modelpost2, x[allriderdata.rider], Bin)
JuMP.@objective(modelpost2, Min, allriderdata.cost' * x) # maximise the total score
JuMP.@constraint(modelpost2, allriderdata.score' * x >= bestteamscore) # cost must be <= 100
JuMP.@constraint(modelpost2, sum(x) == 6) # exactly 9 riders must be chosen
# @constraint(modelpost2, allriderdata.allrounder' * x >= 2) # at least 2 must be all rounders
# @constraint(modelpost2, allriderdata.sprinter' * x >= 1) # at least 1 must be a sprinter
# @constraint(modelpost2, allriderdata.climber' * x >= 2) # at least 2 must be climbers
# @constraint(modelpost2, allriderdata.unclassed' * x >= 3) # at least 3 must be unclassed
JuMP.optimize!(modelpost2)
modelpost2results = JuMP.value.(x)

allriderdata.chosen2 = modelpost2results.data .> 0.5
chosen2teampost = filter(row -> row.chosen2, allriderdata)
```

The best team picked by anyone scored `{julia} bestteamscore`. The cheapest team that would have beaten that scored `{julia} chosen2teampost.score |> sum` points and cost `{julia} chosen2teampost.cost |> sum` points:

```{julia}
markdown_table(chosen2teampost[:, [:rider, :team, :cost, :score]])
```

# Rider value

## Top picks

The riders with the highest value is the rider who scored the most points for the least cost:

```{julia}
# calculate points per cost
allriderdata.value = allriderdata.score ./ allriderdata.cost
# sort by ppc
sort!(allriderdata, :value, rev=true)
# select the top 15 riders,
markdown_table(allriderdata[1:15, [:rider, :team, :cost, :score, :value]])
```

## Worst picks

The most expensive 15 riders who scored nil points:

```{julia}
# select the 15 riders with the highest cost who scored zero
zero_score_riders = filter(row -> row[:points] == 0, allriderdata)
sorted_riders = sort(zero_score_riders, :cost, rev=true)
top_15_riders = sorted_riders[1:15, :]
markdown_table(top_15_riders[end-14:end, [:rider, :team, :cost, :score, :value]])
```
