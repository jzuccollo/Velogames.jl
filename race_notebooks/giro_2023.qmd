---
title: 'Velogames solver: Giro d''Italia 2023'
jupyter: julia-1.9
---


## Load libraries


```{julia}
using Velogames
```

## Load data

```{julia}
FORM_WEIGHT = 0

rider_df = getvgriders("https://www.velogames.com/italy/2023/riders.php")

mycols = [:mountain_me, :gc_me, :sprint_me, :overall_me]
# getpcsranking for each col, filter the dataframe to only the points and riderkey columns, and rename the points column to the col name.
pcs_dfs = map(mycols) do col
    rename(getpcsranking(col), :points => col)[:, [col, :riderkey]]
end

# use reduce to join all dataframes in pcs_dfs on the riderkey column
pcs_df = reduce((x, y) -> outerjoin(x, y, on=:riderkey), pcs_dfs)

# join the velogames and pcs dataframes on the riderkey column
rider_df = leftjoin(rider_df, pcs_df, on=:riderkey)
rider_df = coalesce.(rider_df, 0)

# create calcpcsscore column which is the sum of All Rounder * gc, Sprinter * sprint, Climber * mountain, and Unclassed * overall
rider_df.calcpcsscore = rider_df.allrounder .* rider_df.gc_me .+ rider_df.sprinter .* rider_df.sprint_me .+ rider_df.climber .* rider_df.mountain_me .+ rider_df.unclassed .* rider_df.overall_me

# create calc_score column which is a weighted average of the calcpcsscore and points columns, adjusted for the difference in magnitude
ADJ_FACTOR = mean(rider_df.points) / mean(rider_df.calcpcsscore)
rider_df.calc_score = (1 - FORM_WEIGHT) .* ADJ_FACTOR .* rider_df.calcpcsscore .+ FORM_WEIGHT .* rider_df.points
```

```{julia}
rider_df = getvgriders("https://www.velogames.com/italy/2023/riders.php")
```

```{julia}
# for each rider, get pcsriderpts for that rider
pcsriderpts = map(x -> getpcsriderpts(x), rider_df.rider)
```

```{julia}
df_pcsriderpts = vcat(DataFrame.(rider_df.pcsriderpts)...)
rename!(
    df_pcsriderpts, 
    [x => "pts_" * string(x) for x in names(df_pcsriderpts)]
    )
# hcat(rider_df, df_pcsriderpts)
```

```{julia}
show(rider_df)
```


## Build model

```{julia}
model_results = build_model_stage(rider_df);
```

```{julia}
model_results.data |> sum
```

```{julia}
# total cost
rider_df.cost .* model_results.data |> sum
```

## Results

```{julia}
# selected riders
rider_df[!, :chosen] = model_results.data .> 0.5
chosen_team = filter(:chosen => ==(true), rider_df)
chosen_team[:, [:rider, :team, :class_raw, :selected, :points, :calcpcsscore, :cost]]
```



