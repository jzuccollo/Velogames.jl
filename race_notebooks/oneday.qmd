---
title: "One-day"
---

```{julia}
using Velogames, DataFrames, Statistics, StatsBase

raceurl = "https://www.velogames.com/womens-classics/2024/riders.php"
betfairurl = "https://www.betfair.com/sport/cycling/strade-bianche-women/12651760"
racehash = "#StradeBianche"
racesex = "we"
racecategory = "one-day-races"
```

# Retrieve data

Data is scraped from the [Velogames website](https://www.velogames.com/). Rider scores are the number of points they have accumulated in the current season.

```{julia}
ridervg = getvgriders(raceurl)

# keep only riders in the startlist for for the race
ridervg = ridervg[ridervg.startlist.==racehash, :]

# get PCS rankings
rideroneday = getpcsranking(racesex, racecategory)

# get Betfair odds
riderodds = getodds(betfairurl)
```

## Combine datasets

```{julia}
# join all three datasets on riderkey
riderdf = leftjoin(ridervg, rideroneday, on=:riderkey, makeunique=true)
riderdf = leftjoin(riderdf, riderodds, on=:riderkey, makeunique=true)

# rename points to vgpoints
rename!(
    riderdf,
    :points => :vgpoints,
    :cost => :vgcost,
    :rank => :pcsrank,
    :points_1 => :pcspoints,
    :value => :vgvalue,
)
# drop columns ending in _1
select!(riderdf, Not([:rider_1, :rider_2, :team_1]))

# fill in missing values in rank and points with 0
riderdf[ismissing.(riderdf.pcsrank), :pcsrank] .= 0
riderdf[ismissing.(riderdf.pcspoints), :pcspoints] .= 0
riderdf[ismissing.(riderdf.odds), :odds] .= 500

# convert odds to probability of win
riderdf.pwin = 1 ./ riderdf.odds

disallowmissing!(riderdf, [:vgpoints, :pcspoints])

# normalise odds, vgpoints, pcspoints
riderdf.zpwin = StatsBase.zscore(riderdf.pwin)
riderdf.zvgpoints = StatsBase.zscore(riderdf.vgpoints)
riderdf.zpcspoints = StatsBase.zscore(riderdf.pcspoints)
```

## Calculate rider score and value

```{julia}
# weights for inv odds, vgpoints, pcspoints
WEIGHTS = [1, 0, 0]

# calculate rider calcscore as the mean of the velogames score and the PCS score
zweights = WEIGHTS ./ sum(WEIGHTS)
riderdf.calcscore = zweights[1] .* riderdf.zpwin .+ zweights[2] .* riderdf.vgpoints .+ zweights[3] .* riderdf.zpcspoints

# calculate rider value as the ratio of rider score to rider cost
riderdf.calcvalue = riderdf.calcscore ./ riderdf.vgcost

riderdf
```

# Inspect the data

## Top 10 riders by points

```{julia}
sort(riderdf, :calcscore, rev=true)[1:10, :]
```

## Top 10 riders by value

```{julia}
sort(riderdf, :calcvalue, rev=true)[1:10, Not(:riderkey)]
```

# Thumb on the scales

Set the rider score to 0 for riders you don't fancy.

```{julia}
unfancied = ["Mathieu Van Der Poel"]
riderdf.calcscore[occursin.(unfancied, riderdf.rider)] .= 0
```

# Results

## Total cost of team

Must be no more than 100.

```{julia}
modelresults = buildmodeloneday(riderdf, 6, :calcscore, :vgcost)

# total cost
riderdf.vgcost .* modelresults.data |> sum
```

## Selected riders

```{julia}
# selected riders
riderdf[!, :chosen] = modelresults.data .|> !iszero
chosenteam = filter(row -> row.chosen, riderdf)
sort(chosenteam, :vgcost, rev=true)[:, [:rider, :team, :vgcost, :odds, :pcspoints, :pcsrank, :calcscore, :calcvalue]]
```
